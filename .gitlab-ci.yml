#
#  ______  ______  ___   ___  ______  ______  ______  ______       
# /_____/\/_____/\/___/\/__/\/_____/\/_____/\/_____/\/_____/\      
# \:::_ \ \::::_\/\::.\ \\ \ \:::_ \ \:::_ \ \::::_\/\:::_ \ \     
#  \:\ \ \ \:\/___/\:: \/_) \ \:\ \ \ \:\ \ \ \:\/___/\:(_) ) )_   
#   \:\ \ \ \::___\/\:. __  ( (\:\ \ \ \:\ \ \ \::___\/\: __ `\ \  
#    \:\/.:| \:\____/\: \ )  \ \\:\_\ \ \:\/.:| \:\____/\ \ `\ \ \ 
#     \____/_/\_____\/\__\/\__\/ \_____\/\____/_/\_____\/\_\/ \_\/ 
#                                                                 
#
#   If you have downloaded the source code for "Small World Deluxe" and are reading this,
#   then thank you from the bottom of our hearts for making use of our hard work, sweat
#   and tears in whatever you are implementing this into!
#
#   Copyright (C) 2020. GekkoFyre.
#
#   Small World Deluxe is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   Small World is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with Small World Deluxe.  If not, see <http://www.gnu.org/licenses/>.
#
#
#   The latest source code updates can be obtained from [ 1 ] below at your
#   discretion. A web-browser or the 'git' application may be required.
#
#   [ 1 ] - https://code.gekkofyre.io/phobos-dthorga/small-world-deluxe
#

#
# https://gitlab.com/gitlab-org/gitlab-foss/issues/27436
# https://docs.gitlab.com/ee/user/packages/container_registry/
# https://hub.docker.com/r/burningdaylight/docker-mingw-qt5
# https://www.archlinux.org/packages/
#

### --------------------------------------------------------------------------------------------------- ###

image: archlinux:latest

stages:
    - sworld_debug_archlinux_x86_64
    - test

include:
    - template: SAST.gitlab-ci.yml
    - template: License-Scanning.gitlab-ci.yml
    - template: Secret-Detection.gitlab-ci.yml

variables:
    SAST_DISABLE_DIND: "true"
    GIT_SUBMODULE_STRATEGY: recursive

### --------------------------------------------------------------------------------------------------- ###

#
# https://code.gekkofyre.io/help/user/application_security/sast/index
#
sworld_debug_archlinux_x86_64:
    stage: sworld_debug_archlinux_x86_64
    image: archlinux:latest
    before_script:
        - pacman -Sy --noconfirm
        - pacman -Syu --noconfirm
        - pacman -S base-devel --noconfirm
        - pacman -S gcc --noconfirm
        - pacman -S gcc-fortran --noconfirm
        - pacman -S octave --noconfirm
        - pacman -S python --noconfirm
        - pacman -S gdb --noconfirm
        - pacman -S clang --noconfirm
        - pacman -S llvm --noconfirm
        - pacman -S llvm-libs --noconfirm
        - pacman -S binutils --noconfirm
        - pacman -S automake --noconfirm
        - pacman -S autoconf --noconfirm
        - pacman -S autoconf-archive --noconfirm
        - pacman -S boost --noconfirm
        - pacman -S qt5-base --noconfirm
        - pacman -S qt5-tools --noconfirm
        - pacman -S qt5-serialport --noconfirm
        - pacman -S qt5-sensors --noconfirm
        - pacman -S qt5-imageformats --noconfirm
        - pacman -S qt5-translations --noconfirm
        - pacman -S qt5-svg --noconfirm
        - pacman -S qt5-multimedia --noconfirm
        - pacman -S qt5-xmlpatterns --noconfirm
        - pacman -S qt5-charts --noconfirm
        - pacman -S qt5-3d --noconfirm
        - pacman -S qt5-connectivity --noconfirm
        - pacman -S zstd --noconfirm
        - pacman -S libusb --noconfirm
        - pacman -S hidapi --noconfirm
        - pacman -S lz4 --noconfirm
        - pacman -S zlib --noconfirm
        - pacman -S leveldb --noconfirm
        - pacman -S portaudio --noconfirm
        - pacman -S fftw --noconfirm
        - pacman -S snappy --noconfirm
        - pacman -S qwt --noconfirm
        - pacman -S libogg --noconfirm
        - pacman -S libvorbis --noconfirm
        - pacman -S opus --noconfirm
        - pacman -S opusfile --noconfirm
        - pacman -S texinfo --noconfirm
        - pacman -S libusb-compat --noconfirm
        - pacman -S hamlib --noconfirm
        - pacman -S git --noconfirm
        - pacman -S cmake --noconfirm
        - pacman -S wget --noconfirm
        - export CC=/usr/bin/clang
        - export CXX=/usr/bin/clang++
        - wget https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.16.tar.gz
        - tar -xvzf libiconv-1.16.tar.gz && cd libiconv-1.16
        - ./configure --enable-static --enable-shared
        - make -j 8 && make install
        - cd ./..
        - git clone https://github.com/drowe67/codec2.git
        - cd codec2 && mkdir build && cd build
        - cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=NO ..
        - make -j 8 && make install
        - cd ./../..
        - strip --remove-section=.note.ABI-tag /usr/lib64/libQt5Core.so.5
        - echo "Done compiling primary libraries and preparing `libQt5Core.so.5`! Time to compile QtUsb..."
        - cd src/contrib/QtUsb && mkdir build && cd build
        - qmake -makefile .. && make -j 8 && make install
        - cd ./../../../..
    script:
        - mkdir -p src_build && cd src_build
        - cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -DGFYRE_BUILD_STATIC=ON -DBUILD_CODEC2_SUPPORT=ON -DBUILD_OPUS_SUPPORT=ON ..
        - make -j 8
        - cd ./..
    after_script:
        - echo "Finished execution of Preparatory Build and secondary, lesser stage!"
    artifacts:
        expire_in: 2 weeks
        paths:
            - src_build/
        exclude:
            - "CMakeFiles/"
            - "galaxy_autogen/"
            - "smallworld_autogen/"
            - "src/"
            - "*.o"
            - "*.txt"
            - "Makefile"
            - "*.cmake"
            - "*.h"
    when: always

### --------------------------------------------------------------------------------------------------- ###

#
# https://docs.gitlab.com/ee/user/application_security/sast/
# https://github.com/antiagainst/codeclimate-cppcheck
#
spotbugs-sast:
    stage: test
    dependencies:
        - sworld_debug_archlinux_x86_64
    script:
        - /analyzer run -compile=false
    variables:
        SAST_DEFAULT_ANALYZERS: "flawfinder, gitleaks, trufflehog, secrets"
        SAST_EXCLUDED_PATHS: "assets/**, cmake/**, docker/**, docs/**, po/**, toolchains/**, src/contrib/**"
        SAST_GOSEC_LEVEL: 2
        SAST_FLAWFINDER_LEVEL: 2
        SECRET_DETECTION_HISTORIC_SCAN: "true"
    # https://docs.gitlab.com/ee/ci/yaml/README.html#artifacts
    artifacts:
        expire_in: 1 week
        paths:
            - src_build/
        reports:
            sast: gl-sast-report.json
    allow_failure: true

### --------------------------------------------------------------------------------------------------- ###

#
# https://docs.gitlab.com/ee/ci/yaml/#complete-example-for-release
#
