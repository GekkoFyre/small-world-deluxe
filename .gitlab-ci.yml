#
#  ______  ______  ___   ___  ______  ______  ______  ______       
# /_____/\/_____/\/___/\/__/\/_____/\/_____/\/_____/\/_____/\      
# \:::_ \ \::::_\/\::.\ \\ \ \:::_ \ \:::_ \ \::::_\/\:::_ \ \     
#  \:\ \ \ \:\/___/\:: \/_) \ \:\ \ \ \:\ \ \ \:\/___/\:(_) ) )_   
#   \:\ \ \ \::___\/\:. __  ( (\:\ \ \ \:\ \ \ \::___\/\: __ `\ \  
#    \:\/.:| \:\____/\: \ )  \ \\:\_\ \ \:\/.:| \:\____/\ \ `\ \ \ 
#     \____/_/\_____\/\__\/\__\/ \_____\/\____/_/\_____\/\_\/ \_\/ 
#                                                                 
#
#   If you have downloaded the source code for "Small World Deluxe" and are reading this,
#   then thank you from the bottom of our hearts for making use of our hard work, sweat
#   and tears in whatever you are implementing this into!
#
#   Copyright (C) 2020. GekkoFyre.
#
#   Small World Deluxe is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   Small World is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with Small World Deluxe.  If not, see <http://www.gnu.org/licenses/>.
#
#
#   The latest source code updates can be obtained from [ 1 ] below at your
#   discretion. A web-browser or the 'git' application may be required.
#
#   [ 1 ] - https://code.gekkofyre.io/phobos-dthorga/small-world-deluxe
#

#
# https://hub.docker.com/r/burningdaylight/docker-mingw-qt5
# https://www.archlinux.org/packages/
#

### --------------------------------------------------------------------------------------------------- ###

image: burningdaylight/docker-mingw-qt5:latest

stages:
    - sworld_debug_ubuntu_x86_64
    - sworld_debug_mingw_x86_64
    - test

include:
    - template: SAST.gitlab-ci.yml
    - template: Dependency-Scanning.gitlab-ci.yml
    - template: License-Scanning.gitlab-ci.yml

variables:
    SAST_DISABLE_DIND: "true"
    DS_DISABLE_DIND: "true"

### --------------------------------------------------------------------------------------------------- ###

#
# https://code.gekkofyre.io/help/user/application_security/sast/index
#
sworld_debug_mingw_x86_64:
    stage: sworld_debug_mingw_x86_64
    image: burningdaylight/docker-mingw-qt5:latest
    cache:
        paths:
            - "binaries/*.exe"
    tags:
        - "debug-build"
    script:
        - sudo pacman -Sy --noconfirm
        - sudo pacman -Syu --noconfirm
        - yay -S --noedit mingw-w64-zstd --noconfirm
        - yay -S --noedit mingw-w64-lz4 --noconfirm
        - yay -S --noedit mingw-w64-zlib --noconfirm
        - yay -S --noedit mingw-w64-leveldb --noconfirm
        - yay -S --noedit mingw-w64-portaudio --noconfirm
        - yay -S --noedit mingw-w64-libusb --noconfirm
        - yay -S --noedit mingw-w64-fftw --noconfirm
        - yay -S --noedit mingw-w64-qwt --noconfirm
        - yay -S --noedit mingw-w64-libogg --noconfirm
        - yay -S --noedit mingw-w64-libvorbis --noconfirm
        - mkdir -p third-party
        - cd third-party
        - wget http://git.savannah.gnu.org/cgit/texinfo.git/snapshot/texinfo-6.6.tar.gz
        - tar -xvzf texinfo-6.6.tar.gz
        - cd texinfo-6.6
        - sh ./autogen.sh
        - ./configure --host=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 && make -j 4 && sudo make install
        - cd ./..
        - git clone https://github.com/libusb/libusb-compat-0.1.git
        - cd libusb-compat-0.1 && sh bootstrap.sh && ./configure --host=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 && make -j 4 && make check && sudo make install
        - cd ./..
        - wget https://github.com/Hamlib/Hamlib/releases/download/3.3/hamlib-3.3.tar.gz
        - tar -xvzf hamlib-3.3.tar.gz
        - cd hamlib-3.3 && ./configure --host=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 && make -j 4 && sudo make install
        - cd ./..
        - wget http://www.portaudio.com/archives/pa_stable_v190600_20161030.tgz
        - tar -xvzf pa_stable_v190600_20161030.tgz
        - cd portaudio && cd bindings/cpp && ./configure --host=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 && make -j 4 && sudo make install
        - cd ./../../..
        - mkdir -p artifact-build
        - cd artifact-build
        - cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE="~/toolchains/x86_64-w64-mingw32_linux.cmake" ..
        - make -j 4
        - cd ..
    after_script:
        - echo "Finished execution of Microsoft Window's (i.e. MinGW) build and primary stage!"
    dependencies:
        - sworld_debug_ubuntu_x86_64
    when: always

### --------------------------------------------------------------------------------------------------- ###

sworld_debug_ubuntu_x86_64:
    stage: sworld_debug_ubuntu_x86_64
    image: ubuntu:latest
    cache:
        paths:
            - "binaries/*.deb"
    tags:
        - "debug-build"
    script:
        - sudo pacman -Sy --noconfirm
        - sudo pacman -Syu --noconfirm
        - sudo pacman -S boost --noconfirm
        - sudo pacman -S boost-libs --noconfirm
        - sudo pacman -S qt5-base --noconfirm
        - sudo pacman -S qt5-imageformats --noconfirm
        - sudo pacman -S qt5-multimedia --noconfirm
        - sudo pacman -S qt5-sensors --noconfirm
        - sudo pacman -S qt5-serialbus --noconfirm
        - sudo pacman -S qt5-serialport --noconfirm
        - sudo pacman -S qt5-svg --noconfirm
        - sudo pacman -S qt5-systems --noconfirm
        - sudo pacman -S qt5-tools --noconfirm
        - sudo pacman -S qt5-translations --noconfirm
        - sudo pacman -S qt5-wayland --noconfirm
        - sudo pacman -S qt5-xmlpatterns --noconfirm
        - sudo pacman -S portaudio --noconfirm
        - sudo pacman -S zstd --noconfirm
        - sudo pacman -S leveldb --noconfirm
        - sudo pacman -S lz4 --noconfirm
        - sudo pacman -S zlib --noconfirm
        - sudo pacman -S libusb --noconfirm
        - sudo pacman -S fftw --noconfirm
        - sudo pacman -S qwt --noconfirm
        - sudo pacman -S qwtpolar --noconfirm
        - sudo pacman -S libogg --noconfirm
        - sudo pacman -S libvorbis --noconfirm
        - sudo pacman -S texinfo --noconfirm
        - sudo pacman -S hamlib --noconfirm
        - mkdir -p artifact-build
        - cd artifact-build
        - cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug ..
        - make -j 4
        - cd ..
    after_script:
        - echo "Finished execution of both the Linux build and the secondary stage!"
    when: always

### --------------------------------------------------------------------------------------------------- ###

#
# https://github.com/antiagainst/codeclimate-cppcheck
#
spotbugs-sast:
    script:
        - /analyzer run -compile=false
    variables:
        SAST_GOSEC_LEVEL: 2
    artifacts:
        reports:
            sast: gl-sast-report.json
    allow_failure: true